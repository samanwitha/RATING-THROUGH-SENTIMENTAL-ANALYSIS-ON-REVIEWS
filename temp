Sentiment analysis code:

<?php
	namespace PHPInsight;

	class Sentiment {
	
		/**
		 * Location of the dictionary files
		 * @var str 
		 */
		private $dataFolder = '';
	
		/**
		 * List of tokens to ignore
		 * @var array 
		 */
		private $ignoreList = array();
	
		/**
		 * List of words with negative prefixes, e.g. isn't, arent't
		 * @var array
		 */
		private $negPrefixList = array();
	
		/**
		 * Storage of cached dictionaries
		 * @var array 
		 */
		private $dictionary = array();
	
		/**
		 * Min length of a token for it to be taken into consideration
		 * @var int
		 */
		private $minTokenLength = 1;
	
		/**
		 * Max length of a taken for it be taken into consideration
		 * @var int
		 */
		private $maxTokenLength = 15;
	
		/**
		 * Classification of opinions
		 * @var array
		 */
		private $classes = array('pos', 'neg', 'neu');
	
		/**
		 * Token score per class
		 * @var array 
		 */
		private $classTokCounts = array(
			'pos' => 0,
			'neg' => 0,
			'neu' => 0
		);
	
		/**
		 * Analyzed text score per class
		 * @var array
		 */
		private $classDocCounts = array(
			'pos' => 0,
			'neg' => 0,
			'neu' => 0
		);
	
		/**
		 * Number of tokens in a text
		 * @var int 
		 */
		private $tokCount = 0;
	
		/**
		 * Number of analyzed texts
		 * @var int
		 */
		private $docCount = 0;
	
		/**
		 * Implication that the analyzed text has 1/3 chance of being in either of the 3 categories
		 * @var array
		 */
		private $prior = array(
			'pos' => 0.333,
			'neg' => 0.333,
			'neu' => 0.334,
		);
	
		/**
		 * Class constructor
		 * @param str $dataFolder base folder
		 * Sets defaults and loads/caches dictionaries
		 */
		public function __construct($dataFolder = false) {
	
			//set the base folder for the data models
			$this->setDataFolder($dataFolder);
	
			//load and cache directories, get ignore and prefix lists
			$this->loadDefaults();
		}
	
		/**
		 * Get scores for each class
		 *
		 * @param str $sentence Text to analyze
		 * @return int Score
		 */
		public function score($sentence) {
	
			//For each negative prefix in the list
			foreach ($this->negPrefixList as $negPrefix) {
	
				//Search if that prefix is in the document
				if (strpos($sentence, $negPrefix) !== false) {
					//Reove the white space after the negative prefix
					$sentence = str_replace($negPrefix . ' ', $negPrefix, $sentence);
				}
			}
	
			//Tokenise Document
			$tokens = $this->_getTokens($sentence);
			// calculate the score in each category
	
			$total_score = 0;
	
			//Empty array for the scores for each of the possible categories
			$scores = array();
	
			//Loop through all of the different classes set in the $classes variable
			foreach ($this->classes as $class) {
	
				//In the scores array add another dimention for the class and set it's value to 1. EG $scores->neg->1
				$scores[$class] = 1;
	
				//For each of the individual words used loop through to see if they match anything in the $dictionary
				foreach ($tokens as $token) {
	
					//If statement so to ignore tokens which are either too long or too short or in the $ignoreList
					if (strlen($token) > $this->minTokenLength && strlen($token) < $this->maxTokenLength && !in_array($token, $this->ignoreList)) {
						//If dictionary[token][class] is set
						if (isset($this->dictionary[$token][$class])) {
							//Set count equal to it
							$count = $this->dictionary[$token][$class];
						} else {
							$count = 0;
						}
	
						//Score[class] is calcumeted by $scores[class] x $count +1 divided by the $classTokCounts[class] + $tokCount
						$scores[$class] *= ($count + 1);
					}
				}
	
				//Score for this class is the prior probability multiplyied by the score for this class
				$scores[$class] = $this->prior[$class] * $scores[$class];
			}
	
			//Makes the scores relative percents
			foreach ($this->classes as $class) {
				$total_score += $scores[$class];
			}
	
			foreach ($this->classes as $class) {
				$scores[$class] = round($scores[$class] / $total_score, 3);
			}
	
			//Sort array in reverse order
			arsort($scores);
	
			return $scores;
		}
	
		/**
		 * Get the class of the text based on it's score
		 * 
		 * @param str $sentence
		 * @return str pos|neu|neg
		 */
		public function categorise($sentence) {
	
			$scores = $this->score($sentence);
	
			//Classification is the key to the scores array
			$classification = key($scores);
	
			return $classification;
		}
	
		/**
		 * Load and cache dictionary
		 *
		 * @param str $class
		 * @return boolean
		 */
		public function setDictionary($class) {
			/**
			 *  For some people this file extention causes some problems!
			 */
			$fn = "{$this->dataFolder}data.{$class}.php";
	
			if (file_exists($fn)) {
				$temp = file_get_contents($fn);
				$words = unserialize($temp);
			} else {
				echo 'File does not exist: ' . $fn;
			}
	
			//Loop through all of the entries
			foreach ($words as $word) {
	
				$this->docCount++;
				$this->classDocCounts[$class]++;
	
				//Trim word
				$word = trim($word);
	
				//If this word isn't already in the dictionary with this class
				if (!isset($this->dictionary[$word][$class])) {
	
					
					$this->dictionary[$word][$class] = 1;
				}//Close If statement
	
				$this->classTokCounts[$class]++;
				$this->tokCount++;
			}//Close while loop going through everyline in the text file
	
			return true;
		}
	
		/**
		 * Set the base folder for loading data models
		 * @param str  $dataFolder base folder
		 * @param bool $loadDefaults true - load everything by default | false - just change the directory
		 */
		public function setDataFolder($dataFolder = false, $loadDefaults = false){
			//if $dataFolder not provided, load default, else set the provided one
			if($dataFolder == false){
				$this->dataFolder = __DIR__ . '/data/';
			}
			else{
				if(file_exists($dataFolder)){
					$this->dataFolder = $dataFolder;
				}
				else{
					echo 'Error: could not find the directory - '.$dataFolder;
				}
			}
	
			//load default directories, ignore and prefixe lists
			if($loadDefaults !== false){
				$this->loadDefaults();
			}
		}
	
		/**
		 * Load and cache directories, get ignore and prefix lists
		 */
		private function loadDefaults(){
			// Load and cache dictionaries
			foreach ($this->classes as $class) {
				if (!$this->setDictionary($class)) {
					echo "Error: Dictionary for class '$class' could not be loaded";
				}
			}
	
			if (!isset($this->dictionary) || empty($this->dictionary))
				echo 'Error: Dictionaries not set';
	
			//Run function to get ignore list
			$this->ignoreList = $this->getList('ign');
	
			//If ingnoreList not get give error message
			if (!isset($this->ignoreList))
				echo 'Error: Ignore List not set';
	
			//Get the list of negative prefixes
			$this->negPrefixList = $this->getList('prefix');
	
			//If neg prefix list not set give error
			if (!isset($this->negPrefixList))
				echo 'Error: Ignore List not set';
		}
	
		/**
		 * Break text into tokens
		 *
		 * @param str $string	String being broken up
		 * @return array An array of tokens
		 */
		private function _getTokens($string) {
	
			// Replace line endings with spaces
			$string = str_replace("\r\n", " ", $string);
	
			//Clean the string so is free from accents
			$string = $this->_cleanString($string);
	
			//Make all texts lowercase as the database of words in in lowercase
			$string = strtolower($string);
			$string = preg_replace('/[[:punct:]]+/', '', $string);
	
			//Break string into individual words using explode putting them into an array
			$matches = explode(' ', $string);
	
			//Return array with each individual token
			return $matches;
		}
	
		/**
		 * Load and cache additional word lists
		 *
		 * @param str $type
		 * @return array
		 */
		public function getList($type) {
			//Set up empty word list array
			$wordList = array();
	
			$fn = "{$this->dataFolder}data.{$type}.php";
			;
			if (file_exists($fn)) {
				$temp = file_get_contents($fn);
				$words = unserialize($temp);
			} else {
				return 'File does not exist: ' . $fn;
			}
	
			//Loop through results
			foreach ($words as $word) {
				//remove any slashes
				$word = stripcslashes($word);
				//Trim word
				$trimmed = trim($word);
	
				//Push results into $wordList array
				array_push($wordList, $trimmed);
			}
			//Return $wordList
			return $wordList;
		}
	
		/**
		 * Function to clean a string so all characters with accents are turned into ASCII characters. EG: â€¡ = a
		 * 
		 * @param str $string
		 * @return str
		 */
		private function _cleanString($string) {
	
			$diac =
					/* A */ chr(192) . chr(193) . chr(194) . chr(195) . chr(196) . chr(197) .
					/* a */ chr(224) . chr(225) . chr(226) . chr(227) . chr(228) . chr(229) .
					/* O */ chr(210) . chr(211) . chr(212) . chr(213) . chr(214) . chr(216) .
					/* o */ chr(242) . chr(243) . chr(244) . chr(245) . chr(246) . chr(248) .
					/* E */ chr(200) . chr(201) . chr(202) . chr(203) .
					/* e */ chr(232) . chr(233) . chr(234) . chr(235) .
					/* Cc */ chr(199) . chr(231) .
					/* I */ chr(204) . chr(205) . chr(206) . chr(207) .
					/* i */ chr(236) . chr(237) . chr(238) . chr(239) .
					/* U */ chr(217) . chr(218) . chr(219) . chr(220) .
					/* u */ chr(249) . chr(250) . chr(251) . chr(252) .
					/* yNn */ chr(255) . chr(209) . chr(241);
	
			return strtolower(strtr($string, $diac, 'AAAAAAaaaaaaOOOOOOooooooEEEEeeeeCcIIIIiiiiUUUUuuuuyNn'));
		}
	
		/**
		 * Deletes old data/data.* files
		 * Creates new files from updated source fi
		 */
		public function reloadDictionaries(){
	
			foreach($this->classes as $class){
				$fn = "{$this->dataFolder}data.{$class}.php";
				if (file_exists($fn)) {
					unlink($fn);
				} 
			}
	
			$dictionaries = __DIR__ . '/dictionaries/';
	
			foreach($this->classes as $class){
				$dict = "{$dictionaries}source.{$class}.php";
	
				require_once($dict);
	
				$data = $class;
	
				$fn = "{$this->dataFolder}data.{$class}.php";
				file_put_contents($fn, serialize($$data));
			}
	
			
	
		}
	
	}
	
	?>















Reviews:

<?php

echo '
<!DOCTYPE html>
<html>
<title>W3.CSS Template</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">

<link rel="stylesheet" href="w3.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Oswald">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open Sans">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
h1,h2,h3,h4,h5,h6 {font-family: "Oswald"}
body {font-family: "Open Sans"}
</style>
<body class="w3-light-grey">


<!-- w3-content defines a container for fixed size centered content, 
and is wrapped around the whole page content, except for the footer in this example -->
<div class="w3-content" style="max-width:1600px">



    <header class="w3-display-container w3-wide" id="home">
    <img class="w3-image" src="p10.jpg" alt="Fashion Blog" width="1600" height="1060">
    <div class="w3-display-right w3-padding-large">
	
      <h1 class="w3-text-white ">Ratings4u</h1>
      <h1 class="w3-jumbo w3-text-white  w3-hide-small"><b>MOVIES</b></h1>
        </div>
  </header>

      <div class="w3-container w3-white w3-margin w3-padding-large">
        <div class="w3-center">
         ';
	     echo'<h3>'.$name.'</h3>
        </div>

        <div class="w3-justify">
		<p class="w3-clear"></p>
          <div class="w3-row w3-margin-bottom"><hr>
		  <form class="w3-container" method="POST" action="revsuccess.php" >

<label class="w3-text-black"><b>Reviewer Name</b></label>
<input class="w3-input w3-border" type="text"  name="revr">
 
<label class="w3-text-black"><b>Review</b></label>
<textarea class="w3-input w3-border" rows="5" cols="15" type="text" name="rev"></textarea><br>

<button class="w3-btn w3-black" type="submit">Submit</button>
 
</form>
		  </div>
        </div>
      </div>
      <hr>

    
    </div>


  <!-- END GRID -->
  </div>

<!-- END w3-content -->
</div>



<!-- Footer -->
<footer class="w3-container w3-dark-grey" style="padding:32px">
  <a href="#" class="w3-button w3-black w3-padding-large w3-margin-bottom"><i class="fa fa-arrow-up w3-margin-right"></i>To the top</a>
 











User login:

<?php

require 'connect.inc.php';
if(isset( $_POST['submit_1'] )) {


session_start();
if(isset($_POST['unl'])&& isset($_POST['pwl']))
{
	$username=$_POST['unl'];
	
	$password=$_POST['pwl'];

	
	if(!empty($username)&&  !empty($password))
	{
		
	
	
	 $con = mysqli_connect('localhost','root','');
		 
		 mysqli_select_db($con,'rudb');
		 
		 $sql = "select * from users where username='$username'";
		 
		 $records = mysqli_query($con,$sql);
		
		if($row = mysqli_fetch_array($records))
		{
			
			
			if(password_verify($password,$row['password']))
			{
				
				$_SESSION['uid'] = $row['id'];
					$_SESSION['uname'] = $row['username'];
					
				header('Location:r4uusercat.php');


			}
			else
			{
			 echo '<span  class="btn-bar w3-red " > <button   title="Click to close" class="w3-btn  w3-medium  w3-round-large   " onclick="this.parentElement.style.display=\'none\'"   style="width:100%" >Invalid  password </button></span>';

			}
		
		}
		else
	{
		echo' <span  class="btn-bar  w3-red" > <button   title="Click to close" class="w3-btn  w3-medium  w3-round-large   " onclick="this.parentElement.style.display=\'none\'"   style="width:100%" >Invalid username</button></span> ';
	}
				
	}
	
	else
	{
		echo' <span  class="btn-bar  w3-red" > <button   title="Click to close" class="w3-btn  w3-medium  w3-round-large   " onclick="this.parentElement.style.display=\'none\'"   style="width:100%" >  Enter valid username and password</button></span> ';
	}
	
}	

}
else if(isset( $_POST['submit_2'] )) {

if(isset($_POST['unr'])&& isset($_POST['emr'])&& isset($_POST['pwr'])&& isset($_POST['phr']))
{
	$user=$_POST['unr'];
	$email=$_POST['emr'];
	$pass=$_POST['pwr'];
	$phonenum=$_POST['phr'];
	 
	$hashedPwd = password_hash($pass,PASSWORD_BCRYPT);
		
		$query="INSERT INTO users VALUES('','".mysql_real_escape_string($user)."','".mysql_real_escape_string($hashedPwd)."','".mysql_real_escape_string($email)."','".mysql_real_escape_string($phonenum)."');";
		
		if($query_run=mysql_query($query))
		{
			echo '<span  class="btn-bar  w3-green" > <button   title="Click to close" class="w3-btn  w3-medium  w3-round-large   " onclick="this.parentElement.style.display=\'none\'"   style="width:100%" >        You have successfully signed-in with following details<b> <br> Username : '.$user.'<br> Email: '.$email.'<br> PhoneNumber : '.$phonenum.'</button></span>';
				
			
			
		}
		else
		{
			
			echo '<span  class="btn-bar w3-red" > <button   title="Click to close" class="w3-btn w3-medium  w3-round-large   " onclick="this.parentElement.style.display=\'none\'"   style="width:100%" > <strong> Warning! </strong>&nbsp;  Registration failed.You cannot leave any field empty or Username might have  already been used.</button></span>';





























Rating:

<?php
include ('lib/sentiment_analyser.class.php');
$sa = new SentimentAnalysis();
$sa->initialize();

$name='bahubali';
$revr=$_POST['revr'];
$rev=$_POST['rev'];

$check = $sa->analyse($rev);
$scores = $sa->return_sentiment_rating();
$rating= $scores*2;
echo '
<!DOCTYPE html>
<html>
<title>W3.CSS Template</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">

<link rel="stylesheet" href="w3.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Oswald">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open Sans">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
h1,h2,h3,h4,h5,h6 {font-family: "Oswald"}
body {font-family: "Open Sans"}
</style>
<body class="w3-light-grey">


<!-- w3-content defines a container for fixed size centered content, 
and is wrapped around the whole page content, except for the footer in this example -->
<div class="w3-content" style="max-width:1600px">



  <!-- Image header -->
  <header class="w3-display-container w3-wide" id="home">
    <img class="w3-image" src="p10.jpg" alt="Fashion Blog" width="1600" height="1060">
    <div class="w3-display-right w3-padding-large">
	
      <h1 class="w3-text-white ">Ratings4u</h1>
      <h1 class="w3-jumbo w3-text-white  w3-hide-small"><b>MOVIES</b></h1>
        </div>
  </header>

  <!-- Grid -->
  <div class="w3-row w3-padding w3-border">

    <!-- Blog entries -->
    <div >
    
      <!-- Blog entry -->
      <div class="w3-container w3-white w3-margin w3-padding-large">
        <div class="w3-center">
		
        </div>

        <div class="w3-justify">
		<p class="w3-clear"></p>
          <div class="w3-row w3-margin-bottom">
            <hr>
         ';
		
	$con = mysqli_connect('localhost','root','');
	mysqli_select_db($con,'rudb');
		 
	$sql = "SELECT * FROM products where name='".$name."'";
	$records = mysqli_query($con,$sql);
 while($row = mysqli_fetch_array($records))
  {
    $totrating=$row['rating'];	   
 }
		$sql1 = "SELECT * FROM reviews where name='".$name."'";
		$records1 = mysqli_query($con,$sql1);
	    $count=0;
  while($row1 = mysqli_fetch_array($records1))
  { 
    $count++;
  }
$totrating=($totrating+$rating)/($count+1);
		if(($rev!='')&&($revr!='')){
			$sql="INSERT INTO reviews VALUES('','".mysql_real_escape_string($name)."','".mysql_real_escape_string($revr)."','".mysql_real_escape_string($rev)."','".mysql_real_escape_string($rating)."');";
			$sql1="UPDATE products SET rating='".$totrating."' WHERE name='".$name."'";

		    
		if(mysqli_query($con,$sql)&&mysqli_query($con,$sql1))
			echo '<b><i><h3 class="w3-text-green w3-center">Your review for '.$name.' has been successfully submitted.</h3></i></b>';
		 else
			  echo '<b><i>Updation failed</i></b>';
		}


          echo'</div>
        </div>
      </div>
      <hr>

    
    </div>


  <!-- END GRID -->
  </div>

<!-- END w3-content -->
</div>



<!-- Footer -->
<footer class="w3-container w3-dark-grey" style="padding:32px">
  <a href="#" class="w3-button w3-black w3-padding-large w3-margin-bottom"><i class="fa fa-arrow-up w3-margin-right"></i>To the top</a>
 
</footer>

<script>


</script>

</body>
</html>';

?>





Connection to database:

<?php 
$conn_error='could not connect';
$my_host = 'localhost';
$my_user = 'root';
$my_pass= '';
$my_db='rudb';

if(!mysql_connect($my_host,$my_user,$my_pass)|| !mysql_select_db($my_db))
{
	die($conn_error);
	
}

?>

